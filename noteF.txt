CLASS 52-Mis FrontEnd and BackEnd
----------------------------------
Project + FrontEnd > npm create vite@latest frontend
                     React
                     JavaScript

                     cd frontend
                     npm install
                     npm run dev
                     
                     npm i bootstrap
                     npm i react-bootstrap
                     npm i react-icons

frontend > src > App.css - inner-item - D 
                 Index.css - inner-item - D 
                 App.jsx -clear default items
                 main.jsx > import "bootstrap/dist/css/bootstrap.min.css";

src > components > Header.js > import {} from "react-bootstrap";
                               
                               <Navbar></Navbar> > variant="dark"
                                                   bg="dark"
                                                   expand="md"
                                                   collapseOnSelect
                    Header ==> E 

App.jsx > import Header from "./components/Header.jsx"

Header.jsx > Navbar > import logo from "../assets/react.svg";

                      <Container></Container>
                      <Navbar.Brand>
                        <img src={logo} alt="logo" /> Broadway
                      </Navbar.Brand>

                      <Navbar.Toogle aria-controls="navbar" /> //aria-controls and id must be the same.
                      <Navbar.Collapse id="navbar">
                        <Nav>
                            <Nav.Link>
                               Cart
                            </Nav.Link>                            
                            <Nav.Link>
                               Signin
                            </Nav.Link>
                        </Nav>
                      </Navbar.Collapse>

                      Nav > className="ms-auto" ==> e
                      
                      import {FaShoppingCart, FaUser} from "react-icons/fa";

                      Nav.Link > <FaShoppingCart/>
                                 <FaUser/> ==> i

Footer.jsx > import {Container} from "react-bootstrap";
             <footer>
               <Container>
                    <p>Broadway &copy; {new Date().getFullYear()}</p>
               </Containr>
             </footer> ==> E 

             p > className="text-center"

public > images > insert image in images folder


CLASS 53-ProductPage, Product, Rating
-------------------------------------
components > Product.jsx > import {Card} from "
             {product} //props 
             <Card>
                <Card.Img></Card.Img> ==> e (variant="top", src = {product.image})
             </Card>
                                                              
App.jsx > import products from "./data.js" //data.js is sample data like backend > data > products.js

          import Product from "./component/Product.jsx";
          
          <Product product={products[0]}

Product > Card ==> e (className="my-3 p-3 rounded)
          
          <Card.Body>
              <Card.Text as="div">
                  <strong>{product.name}</strong>
              <Card.Text>
              <Card.Text as="h3">
                  ${product.price}
              </Card.Text>
          </Card.Body>

components > Rating > import {FaStar, FaStarHalfAlt, FaRegStar} from "react-icons/fa";

                      props({value, text})

                      <div className="rating">
                          <span>
                            {value >= 1 ? <FaStar/> : value >= 0.5 ? <FaStarHalfAlt/> : <FaRegStar/>}
                          </span>
                          <span>
                            {value >= 2 ? <FaStar/> : value >= 1.5 ? <FaStarHalfAlt/> : <FaRegStar/>}
                          </span>
                          <span>
                            {value >= 3 ? <FaStar/> : value >= 2.5 ? <FaStarHalfAlt/> : <FaRegStar/>}
                          </span>
                          <span>
                            {value >= 4 ? <FaStar/> : value >= 3.5 ? <FaStarHalfAlt/> : <FaRegStar/>}
                          </span>
                          <span>
                            {value >= 5 ? <FaStar/> : value >= 4.5 ? <FaStarHalfAlt/> : <FaRegStar/>}
                          </span>
                      </div> ==> E 

                      <span className="numreviews">
                        {text} Reviews
                      </span>

index.css > .rating {
              margin: 0.5rem;
            }

            .rating svg {
              color: yellow;
            }

            .numReviews {
              font-size: 0.8rem;
              font-weight: bold;
              padding-left: 0.5rem;
            }

app.jsx > <Container>
            <Row>
              {
                products.map(product => (
                  <Col sm={12} md={6} lg={4} xlg={3}>
                    <Product product={product}/>
                  </Col>
                ))
              }
            </Row>  
          </Container>

 Product.jsx > <strong className=product-title>
                 {product.name}
               </strong>  

index.css > .product-title {
                line-height: 1.8rem;
                overflow: hidden;
                text-overflow: ellipsis;//...
                white-space: nowrap;
             }              

src > pages > ProductPage.jsx > let product = {};
                                
                                <Row>
                                  <Col md={5}>
                                    <Image src={product.image}/>
                                  </Col>
                                </Row> ==> E 

App.jsx > import ProductPage.jsx
          <ProductPage />

ProductPage > <Col md={4}>
                <ListGroup variant="flush">
                  <ListGroup.Item>
                      <h3>
                        {product.name}
                      </h3>
                  </ListGroup.Item>
                  <ListGroup.Item>
                      <h5>
                        {product.price}
                      </h5>
                  </ListGroup.Item>
                  <ListGroup.Item>
                      <Rating value={product.rating} text={product.numReviews} />
                  </ListGroup.Item>
                  <ListGroup.Item>
                      <sapn>{product.description}</span>
                  </ListGroup.Item>
                </ListGroup>
              </Col>

              <Image fluid /> //like water

              <Col md={3}>
                <ListGroup>
                  <ListGroup.Item>
                    <Row>
                    <Col>Price</Col>
                    <Col><strong>{product.price}</strong></Col>
                  </Row>
                  </ListGroup.Item>
                  <ListGroup.Item>
                    <Row>
                      <Col>Status</Col>
                      <Col>{
                        product.countInStock > 0 ? "In Stock" : "Out of Stock"
                      }</Col>
                    </Row>
                  </ListGroup.Item>
                  <ListGroup.Item>
                      <Button variant="secondary disabled={product.countInStock === 0}>
                        Add to Cart
                      </Button>
                  </ListGroup.Item>
                </ListGroup>
              </Col>

              <ListGroup variant="flush"> //to appear border

              
CLASS 54-react-router-dom
-------------------------
Project + Frontend > frontend > Terminal > npm i react-router-dom

pages > HomePage > import products from "../data.js";
                   import {Row, Col} from "react-bootstrap";
                   import Product from "../Product.jsx";

App.jsx > cut(
             {/* <Row>
                  {
                    products.map(product => (
                      <Col sm={12} md={6} lg={4} xlg={3}>
                          <Product product={product} />
                      </Col>
                    ))
                  }
                </Row> */} 
            ) 
            
            and paste into HomePage.jsx

main.jsx > import {RouterProvider, createBrowserRouter, createRoutesFromElements, Route} from "react-router-dom";
           
           <RouterProvider router={router} />

           const router = createBrowserRouter(createRoutesFromElements(
            <Route path="/" element={<App />}>
              <Route path="" element={<HomePage/>}/>
              <Route path="/product" element={<ProductPage/>} />
            </Route>
           ))

App.jsx > import {Outlet} from "react-router-dom";

          <Container>
             <Outlet/>
          </Container>


CLASS 55-CartPage, SigninPage, server proxy, fetch, axios
---------------------------------------------------------
pages > CartPage.jsx ==> C
        SigninPage.jsx ==> C

Header.jsx > import {NavLink} from "react-router-dom";
             
             <NavLink to="/cart">
                Cart
             </NavLink>
             <NavLink to="/signin">
               Signin
             </NavLink>

main.jsx > <Route path="/cart" element={<CartPage/>}/>
           <Route path="/signin" element={<SigninPage/>}/>

           import CartPage from "./pages/CartPage.jsx";
           import SigninPage from "./pages/SigninPage.jsx";

Header.jsx > <NavLink className="nav-link"
             
             <Navbar.Brand> ==> D <NavLink to="/" className="navbar-brand>

Project + FrontEnd > Terminal > npm run data-import
                                npm run server

vite.config.js > server: {
                   proxy: {
                    "/api": "http://localhost:5100"
                   }
                 }

HomePage.jsx > import {useEffect, useState} from "react";
               
               const [products, setProducts] = useState([]);

               useEffect(() => {
                fetch("/api/v1/products")
                 .then(resp => resp.json())
                 .then(data => setProducts(data))
                 .catch(err => console.log("ERROR:: ", err.message))
               }, []);

               <Col key={product._id}>

frontend > npm i axios

ProductPage.jsx > import axios from "axios";
                  import useState from "react";
                  import {id} from "useParams";

                  const [product, setProduct] = useState([])

                  useEffect(() => {
                    axios(`/api/v1/products/${id}`)
                   .then(data => setProduct(data))
                   .catch(err => console.log("ERROR:: ", err.message));
                  })


CLASS 56-Redux Toolkit
----------------------
frontend > Terminal > npm i @reduxjs/toolkit => This is Library.
                      npm i react-redux => This is wraper of @reduxjs/toolkit

chrome extension > Redux Dev Tools

frontend > src > store.js > import {configureStore} from "@reduxjs/toolkit";
                            
                            export store = configureStore({}); //for global state handle
                 
                 slices > cartSlice.js > import {createSlice} from "@reduxjs/toolkit";
                                         
                                         const initialState = {
                                          cartItems: []
                                         }

                                         const cartSlice = createSlice({
                                          name: "cart",
                                          initialState,
                                          reducers: {
                                            addToCart: (state, action) => {
                                                state.cartItems = [...state.cartItems, action.payload] //any type of variable (array, object, variable, boolean, number, etc)
                                            },
                                            removeItem: (state, action) => {

                                            }
                                          }
                                         });

                                         export const {addToCart, removeItem} = cartSlice.actions; //This is for State manipulation => particular action station/component/page

                                         export default cartSlice.reducer; //This is for State Management => Globally => store

store.js > import cartReducer from "./slices/cartSlice";
          reducer: cartReducer;

main.jsx > import {Provider} from "react-redux";
           import {store} from "./store.js";

           <Provider store={store}>
              <RouterProvider router={router} />
           </Provider>


CLASS 57-Redux Toolkit(useDispatch, useSelector)
------------------------------------------------
store.js > reducer: {
            cart: cartSlice,
           }

Browser > Redux > State > cart > cartItems > []

step 1 > when we click Add to Cart, than items add into cart(cartReducer)

step 2 > ProductPage > import {useDispatch} from "react-redux";
                       Dispatch means send(पठाउनु)
                       import {addToCart} from "../slices/cartSlice";

                       const dispatch = useDispatch();

                       const addToCartHandler = (item) => {
                          dispatch(addToCart(item))
                        }

                      <Button onClick={() => addToCarthandler(product)}>
                        Add to Cart 
                      </Button>

step 3 > Browser > Redux > State > cart > cartItems [{...},{...}]

step 4 > How much is required when adding to card 
         ----------------------------------------
         const [qty, setQty] = useState(0);

         ProductPage.jsx > above the Add to Cart Button
                           <ListGroup.Item>
                              <Form.Control 
                                as="select"
                                value={qty}
                                onChange={e => setQty(e.target.value)}
                              >
                                  <option>1</option>
                                  <option>2</option>
                                  <option>3</option>
                              </Form.Control>
                           </ListGroup.Item>

step 5 > auto generate seletct option value
         ----------------------------------
         {
          [...Array(product.countInStock).keys()].map(x => (
            <option key={x + 1}>{x + 1}</option>
          ))
         }

step 6 > addToCartHandler({...product, qty});
         
         [qty, setQty] = useState(1);

         addToCarthandler({...product, qty: Number(qty)})

step 7 > we face new problem: cart item को value change गर्दा new item add नभएर केवल qty मात्र update हुनु पर्ने तर भइरहेको छैन । 

       solution >
       ----------
       cartSlice.js > addToCart > 
                      
                      let existingItem = state.cartItems.find(item => item._id === action.payload._id);
                      if(existingItem) {
                        state.cartItems = state.cartItems.map(item => (item._id === existingItem._id ? action.payload : item))
                      } else {
                        state.cartItems = [...state.cartItems, action.payload]
                      }

step 8 > add badge into header Cart icons
         --------------------------------
         Header.jsx > Cart right side > <FaShoppingCart/> Cart <Badge bg="success" pill>1</Badge>
         import {useSelector} from "react-redux";
         const {cartItems} = useSelector(state => state.cart);//cart दिनु भनेको store को cart दिनु हो, store को cart मा cartReducer हुनु भनेको cartSlice को  initialState को cartItems दिनु सरहको हो । त्यही भएर हामीले state => state.cart बाट Destructuring गरी cartItems निकाल्न सकिन्छ ।

         <Badge>
         {cartItems.reduce(acc, item) => acc + item.qty, 0}
         </Badge>

         {cartItems.length > 0 && <Badge></Badge>} //cartItem मा कुनै पनि item add भएको छैन भने Badge मा केहि देखाउदैन ।


CLASS 58-CartPage full Update, localStorage, removeItem
--------------------------------------------------------
ProductPage.jsx > import {useNavigate} from "react-router-dom";
                  
                  const navigate = useNavigate();

                  addToCartHandler > navigate("/cart");

CartPage.jsx >  import {useSelector, useDispatch} from "react-redux";
                import {Row, Col, ListGroup, Button, Image, Form} from "react-bootstrap";
                import {addToCart} from "../slices/cartSlice";
                import {Link} from "react-router-dom";

                const {cartItems} = useSelector(state => state.cart);

                const dispatch = useDispatch();

                const updateCartQty = (item, qty) => {
                  dispatch(addToCart({...item, qty}));
                }

                <Row>
                  <Col md={8}>
                    <ListGroup variant="flush">
                      {
                        cartItems.map(item => (
                          <ListGroup.Item>
                            <Row>
                              <Col md={2}>
                                <Image src={item.image} fluid rounded />
                              </Col>
                              <Col md={3}>
                                <Link to={`/product/${item._id}`}>
                                  <strong>{item.name}</strong>
                                </Link>
                              </Col>
                              <Col md={2}>
                                <Form.Control 
                                  as="select"
                                  value={item.qty}
                                  onChange={(e) => updateCartQty(item, Number(e.target.value))}
                                >
                                  {
                                    [...Array(item.countInStock).keys()].map(x => (
                                      <option key={x + 1}>{x + 1}</option>
                                    ))
                                  }
                                </Form.Control>
                              </Col>
                            </Row>
                          </ListGroup.Item>
                        ))
                      }
                    </ListGroup>
                  </Col>
                  <Col md={4}></Col>
                </Row>

                import {FaTrash} from "react-bootstrap/fa";
                <Col md={2}>
                  <Button type="button" variant="light" onClick={() => removeCartItem(item._id)}>
                   <FaTrash />
                  </Button>
                </Col>
                
                const removeCartItem = (id) => {
                  dispatch(removeItem(id))
                }

cartSlice.js > removeItem > state.cartItems = state.cartItems.filter(item => item._id !== action.payload);

              addToCart > localStorage.setItem("cart", JSON.stringify(state.cartItems))

              initialState > cartItems: localStorage.getItem("cart") ? JSON.parse(localStorage.getItem("cart")) : [];

              removeItem > localStorage.setItem("cart", JSON.stringify(state.cartItems));

CartPage.jsx > <Col md={4}>
                <ListGroup>
                  <ListGroup.Item>
                    <h4>
                     Total {cartItems.reduce((acc, item) => acc + item.qty, 0)} items
                    </h4>
                  </ListGroup.Item>
                  <ListGroup.Item>
                   <Row>
                     <Col>
                        Sub Total
                     </Col>
                     <Col>
                        {
                          (cartItems.reduce((acc, item) => acc + item.qty * item.price, 0)).tofixed(2)
                        }
                     </Col>
                   </Row>
                  </ListGroup.Item>
                  <ListGroup.Item>
                    <Row>
                      <Col>
                        Shipping Cost
                      </Col>
                      <Col>
                        ${5}
                      </Col>
                    </Row>
                  </ListGroup.Item>
                  <ListGroup.Item>
                    <Row>
                      <Col>
                        Total Price
                      </Col>
                      <Col>
                        {
                          cartItems.reduce((acc, item) => acc + item.qty * item.price, 0) + 5
                        }
                      </Col>
                    </Row>
                  </ListGroup.Item>
                  <ListGroup.Item>
                    <Button>
                      Checkout
                    </Button>
                  </ListGroup.Item>
                </ListGroup>
               </Col>

               {
                cartItems.length > 0 && <Col md={4}></Col>
               }

Class 58 सम्मको काम भनेको data fetch or axios गर्दा HomePage र ProductPage मा  data Loading... गरेको, त्यही data लाई आधार मानेर RTK को global State Management भएको छ ।

RTK State Management
--------------------
store.js > reducer मा cartSlice related reducers store गरिएको छ । जसमा cartSlice को initialState भित्रको cartItems को data ले प्रतिनिधित्व गरिरहेको हुन्छ ।
        
cartSlice.js > initialState > सुरुवाती वा परिमार्जित(updated) data रहन्छ । 
               reducers > initialState वा सो भित्रको object को data मा फेरबदेल वा परिमार्जित गर्ने साधन नै reducers हो ।
               reducers भित्र भिन्न भिन्न method function रहेका हुन्छन्, जसको काम भनेको initialState को value मा परिवर्तन वा updata गर्ने हो ।
                       initialState मा के के परिवर्तन गर्ने हो त्यसको सम्पुर्ण गतिविधि यहि method funtion बाट गरिन्छ ।

               cartSlice बाट method function लाई export गर्नु पर्छ । जुन cartSlice.action को माध्यमबाट गर्न सकिन्छ । यि  export method function हरुले आवश्यकता अनुसार useDispatch को सहायताले origin method decleration मा action.payload को माध्यमबाट initialState को value मा परिमार्जन गर्न भुमिका खेल्ने गर्दछ। 

               यदि store को data अन्य statement मा आवश्यक परेमा useSelector को माध्यमबाट state.cart बाट destructure गरेर cartItems(cartSlice को initialState) को रुपमा प्राप्त गर्न सकिन्छ ।

               साराशंः store मा रहेको जुनसुकै data लाई update र get गर्न सकिन्छ ।

               store को data Globally access गराउने काम react-redux को Provider ले गराउदछ, जहाँ store को data लाई Provider ले props रुपमा आफ्ना children हरुलाई स्वतन्त्र रुपमा हस्तानान्तरण गरिरहेको हुन्छ ।

CLASS 59-RTK Query
------------------
slices > apiSlice.js > import {createApi, fetchBaseQuery} from "@reduxjs/toolkit/query/react";

src > constants.js > export const BASE_URL="";
                     export const PRODUCT_URL="/api/v1/products";
                     export const USER_URL="/api/v1/users"

apiSlice.js > import {BASE_URL} from "../constants";
              
              const baseQuery = fetchBaseQuery(baseUrl: BASE_URL);

              export const apiSlice = createApi({
                baseQuery,
                tagTypes: ["product", "User", "Order"];,
                endpoints:(builder) => ({}),
               });
              
              tagTypes
              --------
              for cache memory in redux. cache means store.
              cache memory भनेको त्यो हो जुन कुनै पनि data fetching गर्दा पहिलो पटक database बाट data आउछ, तर त्यही प्रकृतीको data browser लाई आवश्यक पर्यो भने cache memory बाट लिन्छ ।
              कुनै पनि data लाई data fetching गरी first time database बाट cache memory मा data store गर्न सकिन्छ ।
              साथै विभिन्न प्रकृतिको data लाई भिन्न भिन्न स्थानमा Data cache(store) गर्न सकिन्छ । 
              जस्तैः Product, User, Order, etc.

              endpoints
              ---------
              endpoints cartSlice को reducers जस्तै हो । 
              यसले भिन्न भिन्न प्रकृतिका api को fetch गर्ने गर्दछ ।
              
              builder
              -------
              builder भनेको data fetch or axios जस्तै हो ।
              endpoints and builder को सहायताले धेरै api methods बनाउन सकिन्छ ।
              ति api method मा builder को सहायताले query and mutation गर्न सकिन्छ ।

              builder.query
              -------------
              database बाट data get गर्नलाई आवश्यक पर्छ ।

              builder.mutation
              ----------------
              database मा post, delete, update, patch गर्न आवश्यक पर्दछ ।

              builder.query or builder.mutation जेसुकै गर्नु परे पनि query field कै प्रयोग गर्नु पर्छ ।

slices > productSlice.js > import {apiSlice} from "./apiSlice.js";
                           
                           const productSlice = apiSlice.injectEndpoints({
                            endpoints: (builder) => ({
                              getProducts: builder.query({}),
                              getProductById: builder.query({}),
                              updateProductById: builder.mutation({}),
                              deleteProductById: builder.mutation({}),
                            }),
                           })

                           const productSlice = apiSlice.injectEndpoints({
                            endpoints: (builder) => ({
                              getProducts: builder.query({
                                query: () => ({
                                  url: PRODUCT_URL,
                                })
                              }),
                              getProductById: builder.query({
                                query: (id) => ({
                                  url: `${PRODUCT_URL}/${id}`,
                                })
                              }),
                              updateProductById: builder.mutation({
                                query: () => ({
                                  url: 
                                })
                              }),
                              deleteProductById: builder.mutation({
                                query: () => ({
                                  url: 
                                })
                              }),
                            }),
                           })

store.js > import {apiSlice} from "./slices/apiSlice";
           reducer > [apiSlice.reducerPath]: apiSlice.reducer,

           middleware: (getDefaultMiddleware) => getDefaultMiddleware.concat(apiSlice.middleware)

HomePage.jsx > import {useGetProductsQuery} from "../slices/productSlice";
               
               const {data:products, isLoading, error} = useGetProductsQuery();

               {
                isLoading ? (<h6>Loading...</h6>) : (<Row></Row)
               }

ProductPage.jsx > import {useGetProductByIdQuery} from "../slices/productSlice";
                  
                  const {data:product, isLoading, error} = useGetProductByIdQuery(id);

                  {
                    isLoading ? (<h6>Loading...</h6>) : (<Row></Row>)
                  }
                       

CLASS 60-Sign In, usersApiSlice, toastify, authSlice, 
----------------
components > FormContainer.jsx > import {Col, Container, Row} from "react-bootstrap";
                                 
                                 FormContainer = ({children})
                                 
                                 <Container>
                                    <Row className="justify-content-md-center>
                                      <Col xs={12} md={6}>
                                        {children}
                                      </Col>
                                    </Row>
                                 </Container> ==> E 

usersApiSlice.js > import {apiSlice} from "./apiSlice";
                   import {USER_URL} from "../constants";

                   const usersApiSlice = apiSlice.injectEndpoints({
                    endpoints: (builder) => ({
                      login: builder.mutation({
                        query: (data) => ({
                          url: `${USER_URL}/login`,
                          methods: "POST",
                          body: data
                        })
                      })
                    })
                   })

                   export const {useLoginMutation} = usersApiSlice;

SigninPage.jsx > import {useLoginMutation} from "../slices/usersApiSlice";

                 const [login, {isLoading}] = useLoginMutation();

                 submitHandler > async()
                                 let resp = await login({email, password}).unwrap();

frontend > Terminal > npm i react-toastify

app.jsx > import {ToastContainer} from "react-toastify";
          import "react-toastify/dist/ReactToastify.css";

          <ToastContainer/>

Browser > npm > react-toastify
                documentation

SigninPage.jsx > import {toast} from "react-toastify";
                
                sumbitHandler > catch > toast.error(err.data.error);//if you have errorHandlerMiddleware "Error" you fill "err.data.Error"/best idea check console.log(err) than you will find idea.

                                try > toast.success(resp.message);

              
CartPage.jsx > Checkout > <Link to="/signin?redirect=/shipping" className="btn btn-secondary">Checkout</Link>

slices > authSlice.js > import {createSlice} from "@reduxjs/toolkit";
                        
                        const initialState = {
                          userInfo: localStorage.getItem("userInfo") ? JSON.parse(localStorage.getItem("userInfo")): {},//यसमा {} को प्रयोग किन? [] प्रयोग किन नगरेको ? किननकी user login हुदाँ केवल single user को details आउने हुदा [] बनाइराख्नु आवश्यक पर्दैन ।
                        }

                        const authSlice = createSlice({
                          name: "auth",
                          initialState,
                          reducers: {
                            setCredentials: (state, action) => { //credentials = प्रमाणहरु
                              state.userInfo = action.payload;
                              localStorage.setItem("userInfo", JSON.stringify(state.userInfo))
                            },
                            logout: (state, action) => {
                              state.userInfo = {},
                              localStorage.removeItem("userInfo")
                            }
                          }
                        });

                        export const {setCredentials, logout} = authSlice.actions;

                        export default authSlice.reducer;

store.js > import authReducer from "./slices/authSlice";
           
           reducer > auth: authReducer,

SigninPage > import {setCredentials} from "../slices/authSlice";
            import {useDispatch} from "react-redux";

            const dispatch = useDispatch();
             
             submitHandler > dispatch(setCredentials({resp.user}));

             import {useSelector} from "react-redux";

             const {userInfo} = useSelector(state => state.auth)

             import {useLocation, useNavigate} from "react-router-dom";

             //const location = useLocation()
             // console.log(locatiion);
             const {search} = useLocation();

             const sp = new URLSearchParams(search);//new लगायो भने s.p मा get भन्ने key आउछ ।
             const redirect = sp.get("redirect') || "/";

             import {useEffect} from "react";
             useEffect(() => {
              if(userInfo) {
                navigate(redirect);
              }
             })

conclusion of Class 60
----------------------
कुन कुन steps चालिएको छ ?
‍‍=> CartPage को Checkout मा click गर्दा यदि कुनै पनि user login छैन भने at first login हुनुपर्ने र त्यसपछि सिधै shipping page redirect हुनु पर्ने,
‍=> कुनै पनि user ले सुरुवात मै login गरेको छ भने HomePage मा redirect हुनुपर्ने,

CartPage को  Checkout बाट सिधै shipping page मा redirect हुदा under the hood कुन कुन कार्य भएको हुन्छ ?
‍=> CartPage: to="/login?redirect=/shipping
=> SigninPage मा रहेको login Form को गतिविधिः
   ---------------------------------------
   <input
      type="email"
      value={email}  //const [email, setEmail] = useState();
      onChange={e => setEmail(e.target.value)}
    /> 

    <input
       type="password"
       value={password}  //const [password, setPassword] = useState();
       onChange={e => setPassword(e.target.value)}
    />

    <form onSubmit={submitHandler}>
      <button type="button">Log in</button>
    </form>

=> submitHandler  को गतिविधिः
   ------------------------
   const submitHandler = async(e) => {
    e.preventDefault();
    const resp = await login({email, password}) //login आवश्यक छ !
    dispatch(setCredentials(resp.user)) //dispatch, setCredentials र resp.user आवश्यक छ ।
   }

   login को आवश्यकता परिपुर्तिः
   ------------------------
   usersApiSlice ले गर्छ > import {apiSlice} from "./apiSlice";
                         
                         const usersApiSlice = injectEndpoints({
                          endpoints: (builder) => ({
                            login: builder.mutation({
                              query: (data) => ({
                                url: `${USER_URL}/login`,
                                method: "POST",
                                body: data
                              })
                            })
                          })
                         })

                         export const {useLoginMutation} = usersApiSlice

  import {useLoginMutation} from "../slices/usersApiSlice";
  const [login, {isLoading}] = useLoginMutation(); //यो line बाट login लिन्छ ।

  resp.user को आवश्यकता परिपुर्तिः
  ----------------------------
  const resp = await login({email, password}) hit हुन जान्छ जब Log in Button मा click गर्छौ,
  login api call हुन जान्छ र backend को controller > user.controller.js > login मा hit हुन जान्छ,
  const login = asyncHandler(async(req, res) => {
    let {email, passwod} ‍= res.body;
    let user = await User.findOne({email});
    if(!user) throw new ApiError(404, "Email is not exist!);
    
    if(await user.matchPassword(password)){
      createToken(res, user_id)
      res.send({
        message: "Login Success !",
        user: {
          name: user.name,
          email: user.email,
          isAdmin: user.isAdmin
        }
      })
    }
  })

  setCredentials को आवश्यकताको परिपुर्तिः
  -----------------------------------
  यो प्राप्त गर्न authSice बनाउनु पर्छ, यो login user को state manage गर्ने काम गर्छ 
  import {createSlice} form "@reduxjs/toolkit";

  const initialState = {
    userInfo: localStorage.setItem("userInfo") ? JSON.parse(localStorage.getItem("userInfo")) : null,
  }

  const authSlice = createSlice({
    name: "auth",
    initialState,
    reducers: {
      setCredintials: (state, action) => {
        state.userInfo = action.payload;
        localStorage.setItem("userInfo", JSON.stringify(state.userInfo));
      }
      logout: (state, action) => {
        state.userInfo: {};
        localStorage.setItem("userInfo", JSON.stringify(state.userInfo));
      }
    }
  })

  export const {setCredentials} = authSlice.actions;
  export default authSlice.reducer;

यि माथिका सबै गतिविधि submitHandler function call हुदा आवश्यक पर्ने तत्वहरु हुन, यो function ले गर्ने भनेको केवल login api call, get user info and set into store

के Log in Button मा click गर्दैमा login भएर तोकिएको कार्य(820) बन्छ होला त?
‍=> हुदैन, 820 को कार्य हुन्छ जब useEffect ले तोकिएको कार्य गर्न पाइरहन्छ ।

त्यसो भए 820(to="/login?redirect=/shipping") को कार्य गर्न के गर्ने अब ?
----------------------------------------------------------------
=> हामीले dispatch(setCredentails(resp.user)) को माध्यमबाट store मा जुन data store गरेका छौ त्यो data get गर्नु पर्छ,
   const {userInfo} = useSelector(state => state.auth) //auth comes from store.js > reducer

   useEffect(() => {
    if(userInfo) { //userInfo त हामीले प्राप्त गरिसक्यौ ।
      navigate(redirect) //navigate र redirect आवश्यक छ ।
    }
   }, [userInfo, navigate, redirect])

   navigate को परिपुर्तिः
   -----------------
   import {useNavigate} from "react-router-dom";
   const navigate = useNavigate();

   redirect को परिपुर्तिः
   ------------------
   import {useLocation} from "react-router-dom";
   //const location = useLocation()
   //console.log(location) //outcome: path: "abcd', search: "?redirect=/shipping", etc
   so, {search} = useLocation();

   const sp = new URLSearchParams(search);
   const redirect = sp.get("redirect") || "/";

useEffect को असरः
-----------------
जब सम्म dependency मा रहेका userInfo, navigate, redirect को movement मा हलचल आइरहन्छ त्यो बेला सम्म आवश्यकतानुसार shipping page वा Homepage मा redirect भइरहन्छ ।

अर्थात, यदि कुनै user log in नभई Checkout गर्न खोज्छ भने to="/login?redirect=/shipping" को कारण search location मा ?redirect=/shipping आउछ र redirect variable मा new URLSearchParams.get("redirect") || "/" को सहायताले /shipping आउन जान्छ र navigate("/shipping") हुन्छ ।

यदि कुनै user Checkout मा नगई सिधै login गर्छ भने माथिको प्रकियालले फेल खान्छ र redirect variable मा "/" आउन जान्छ र navigate("/") Homepage मा हुन्छ ।

Login Button मा click गर्दा भन्दा पनि त्यो click कारण उत्पन्न हुने userIfno र react-router-dom को माध्यमबाट create गरिएको redirect को प्रयोग गरि अपनाइएको useEffect को माध्यमबाट Checkout to login to shipping र login to HomePage मा shift भएको हो ।


CLASS 61-Frontend Auth and Place Order setProduct
-------------------------------------------------
Project + Frontend > Terminal > npm i -D concurrently
                    
                     package.json > "scripts": {
                                       "server": "nodemon --env-file=.env backend/index.js",
                                       "client": "npm run dev --prefix=frontend",
                                       "dev": "concurrently \"npm run server\" \"npm run client\"",
                                      }

Header.jsx > import {userInfo} = useSelector(state => state.auth);

             Log in > {
                       !userInfo ? (
                        <NavLink to="/singin" className="nav-link">
                          Signin
                        </NavLink>
                       ) : ( 
                        <NavDropdown title={userInfo.name}>
                          <NavDropdown.Item>Profile</NavDropdown.Item>
                          <NavDropdown.Item onClick={logoutHandler}>Logout</NavDropdown.Item>
                        </NavDropdown>
                       )
                      }

             Logout > shortcurt(
                      dispatch(logout()) //localStorage(empty)
                      )

                      usersApiSlice > endPoints > builder > userLogout : builder.mutation({
                        query: () => ({
                          url: `${USER_URL}/logout`,
                          method: "POST",
                        })
                      })

                      export const {useUserLogoutMutation} = usersApiSlice;

              import {useUserLogoutMutation} from "../slices/usersApiSlice";
              import {logout} from "../slices/authSlice";

              logoutHandler > resp = await userLogout().unwrap();
                              dispathc(logout())
                              toast.success(resp.message);
                              navigate("/signin")

components > Message.jsx > const Message = ({variant, children}) => {
                                             return(
                                              <Alert variant={variant}>
                                                {children}
                                              </Alert>
                                             ) 
                                            }

                           Message.defaultProps = { 
                            variant: "primary"
                           }

                           export default Message;

CartPage.jsx > import Message from "../components/Message";
              
              {cartItems.length === 0 ? (<Message>Cart is empty. <Link to="/">Go Back</Link></Message>) : <Row></Row>}   

HomePage.jsx > import Message from "../components/Message";

               {
                isLoading ?
                 <h6>Loading...</h6>
                  : error ? 
                  (<message variant="danger">
                    {error.data.error}
                   </Message>) : (
                    <Row></Row>
                   )
               }       
               
components > PrivateRouter.jsx > import {Outlet, navigate} from "react-router-dom";
                                 import {useSelector} from "react-redux";

                                 const PrivateRouter = () => {
                                  const {userInfo} = useSelector(state => state.auth);
                                  return userInfo ? <Outlet/> : <Navigate to="/" /> // ProviteRouter भित्र Outlet छ भन्नुको अर्थ parent element को भित्र जुन element रहेको छ त्यही element render हुन्छ भन्नु हो । जसरी App component भित्र Outlet रहेको छ भन्नुको अर्थ Route मा App parent element हो र App भित्र जति पनि element रहेका छन् , ति सबै Outlet को रुपमा रहेका हुन्छन् र App render हुदा App भित्रै render हुन्छन् । PrivateRouter ले Outlet return गर्नु भनेको पनि यदि PrivateRouter लाई parent element मानेर कुनै पनि element लाई त्यसको children को रुपमा राख्ने हो भने त्यो त्यसको Outlet को रुपमा render हुन्छ ।
                                  userInfo छैन भने login छैन भन्नु सरह कै हो, false भयो भने Navigate ले singin मा redirect गरिदिन्छ ।
                                 }

                                 export default PrivateRouter;
                           
                              











